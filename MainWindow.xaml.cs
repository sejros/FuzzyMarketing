using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data;
using FuzzyCalcNET.Set;
using FuzzyCalcNET.Controller;
using Microsoft.Win32;
using System.IO;
using System.Windows.Media.Imaging;

namespace FuzzyMarketing
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Dictionary<string, ObservableCollection<Factor>> data;
        Dictionary<string, DataGrid> linkage;
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {

        }

        private void Window_Initialized(object sender, EventArgs e)
        {
            data = new Dictionary<string, ObservableCollection<Factor>>();

            linkage = new Dictionary<string, DataGrid>();
            linkage["e_v"] = DG_e_v;
            linkage["e_u"] = DG_e_u;
            linkage["p_v"] = DG_p_v;
            linkage["p_u"] = DG_p_u;
            linkage["s_v"] = DG_s_v;
            linkage["s_u"] = DG_s_u;
            linkage["t_v"] = DG_t_v;
            linkage["t_u"] = DG_t_u;

            foreach (string key in linkage.Keys)
            {
                data[key] = new ObservableCollection<Factor>();
                linkage[key].ItemsSource = data[key];
                linkage[key].CanUserAddRows = true;
                linkage[key].CanUserDeleteRows = true;
                data[key].Add(new Factor());
                //linkage[key].AutoGenerateColumns = false;
                linkage[key].AutoGeneratedColumns += delegate(object send, EventArgs ev)
                {
                    DataGrid s = send as DataGrid;
                    s.Columns[0].Header = "Показатель";
                    //linkage[key].Columns[0].Width = 300;
                    s.Columns[1].Header = "Вес";
                    s.Columns[1].Width = 80;
                    s.Columns[2].Header = "Значение";
                    s.Columns[2].Width = 80;
                };
            }
        }

        private void add_button1_Click(object sender, RoutedEventArgs e)
        {
            //data.Add(new Factor());
        }

        private void ok_btn_Click(object sender, RoutedEventArgs e)
        {
            //MessageBox.Show(data[data.Count-1].name);
        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void About_program_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Fuzzy Management \n(с) 2012. ВолгГТУ. Шаховская Л.С., Аракелова И.В., Коротеев М.В.");
        }

        private void Image_btn_Click(object sender, RoutedEventArgs e)
        {
			OpenFileDialog openFileDialog1 = new OpenFileDialog();
			openFileDialog1.Filter = "JPEG Images|*.jpg";
			openFileDialog1.Title = "Выберите изображение организационной структуры";
			// Show the dialog and get result.
	    	Nullable<bool> result = openFileDialog1.ShowDialog();
            if (result == true) // Test result.
            {
                string filename = openFileDialog1.FileName;
                BitmapImage bmp = new BitmapImage();
                bmp.BeginInit(); // загружаю картинку
                bmp.UriSource = new Uri(filename);
                bmp.EndInit();
                Clipboard.SetImage(bmp);
                RTB.CaretPosition = RTB.CaretPosition.DocumentEnd;
                RTB.Paste();
            }
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
			// Configure save file dialog box
			Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
			dlg.FileName = "Document"; // Default file name
			dlg.DefaultExt = ".rtf"; // Default file extension
			dlg.Filter = "Text documents (.rtf)|*.rtf"; // Filter files by extension
			// Show save file dialog box
			Nullable<bool> result = dlg.ShowDialog();
			string filename;
			// Process save file dialog box results
			if (result == true)
			{
				// Save document
				filename = dlg.FileName;
				TextRange range;
	           	FileStream fStream;
            	range = new TextRange(RTB.Document.ContentStart, RTB.Document.ContentEnd);
            	fStream = new FileStream(filename, FileMode.Create);
            	range.Save(fStream, DataFormats.Rtf);
            	fStream.Close();
			}			
        }
        private void Add_Factor(string key)
        {
            data[key].Add(new Factor());
        }

        private void add_e_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("e_v");
        }

        private void add_e_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("e_u");
        }

        private void add_p_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("p_v");
        }

        private void add_p_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("p_u");
        }

        private void add_t_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("t_v");
        }

        private void add_t_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("t_u");
        }

        private void add_s_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("s_v");
        }

        private void add_s_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("s_u");
        }


    }
    class Factor
    {
        public string name { get; set; }
        public double weight { get; set; }
        public double value { get; set; }
        public Factor(string n="", double w=0.0, double v=0.0)
        {
            this.name = n;
            this.weight = w;
            this.value = v;
        }
    }
}
