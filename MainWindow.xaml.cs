using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data;
using FuzzyCalcNET.Set;
using FuzzyCalcNET.Controller;
using Microsoft.Win32;
using System.IO;

namespace FuzzyMarketing
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Dictionary<string, ObservableCollection<Factor>> data;
        Dictionary<string, DataGrid> linkage;
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_Initialized(object sender, EventArgs e)
        {
            data = new Dictionary<string, ObservableCollection<Factor>>();
            Random r = new Random();

            linkage = new Dictionary<string, DataGrid>();
            linkage["e_v"] = DG_e_v;
            linkage["e_u"] = DG_e_u;
            linkage["p_v"] = DG_p_v;
            linkage["p_u"] = DG_p_u;
            linkage["s_v"] = DG_s_v;
            linkage["s_u"] = DG_s_u;
            linkage["t_v"] = DG_t_v;
            linkage["t_u"] = DG_t_u;

            foreach (string key in linkage.Keys)
            {
                data[key] = new ObservableCollection<Factor>();
                linkage[key].ItemsSource = data[key];
                linkage[key].CanUserAddRows = true;
                linkage[key].CanUserDeleteRows = true;
                for (int i = 0; i < 5; i++)
                {
                    data[key].Add(new Factor(r.Next().ToString(), r.NextDouble(), r.NextDouble()));
                }
                data[key].Add(new Factor());
                linkage[key].AutoGeneratedColumns += delegate(object send, EventArgs ev)
                {
                    DataGrid s = send as DataGrid;
                    s.Columns[0].Header = "Показатель";
                    s.Columns[0].Width = 250;
                    s.Columns[1].Header = "Вес";
                    s.Columns[1].Width = 80;
                    s.Columns[2].Header = "Значение";
                    s.Columns[2].Width = 80;
                };
            }            
        }
        private double _WA(string name)
        {
            double sum_e_v = 0.0;
            double res_e_v = 0.0;
            foreach (Factor item in data[name])
            {
                res_e_v += item.value * item.weight;
                sum_e_v += item.weight;
            }
            if (sum_e_v == 0.0)
            {
                return 0.0;
            }
            res_e_v /= sum_e_v;
            return res_e_v;
        }
        private void ok_btn_Click(object sender, RoutedEventArgs e)
        {
            Paragraph p;
            // Printing data
            Dictionary<string, string> labels = new Dictionary<string, string>();
            labels["p_v"] = "Политические возможности";
            labels["e_v"] = "Экономические возможности";
            labels["s_v"] = "Социальные возможности";
            labels["t_v"] = "Технические возможности";
            labels["p_u"] = "Политические угрозы";
            labels["e_u"] = "Экономические угрозы";
            labels["s_u"] = "Социальные угрозы";
            labels["t_u"] = "Технические угрозы";

            foreach (string key in data.Keys)
            {
                p = new Paragraph(new Run(labels[key]));
                p.FontSize = 16;
                p.FontWeight = System.Windows.FontWeights.Bold;
                FlowDoc.Blocks.Add(p);

                Table t = new Table();
                t.BorderThickness = new Thickness(1.0);
                t.BorderBrush = new SolidColorBrush();
                
                TableColumn tc;
                tc = new TableColumn();
                tc.Width = new GridLength(250);
                t.Columns.Add(tc);
                tc = new TableColumn();
                tc.Width = new GridLength(130);
                t.Columns.Add(tc);
                tc = new TableColumn();
                tc.Width = new GridLength(130);
                t.Columns.Add(tc);

                t.RowGroups.Add(new TableRowGroup());
                t.RowGroups[0].Rows.Add(new TableRow());
                TableRow currentRow = t.RowGroups[0].Rows[0];
                currentRow.FontWeight = System.Windows.FontWeights.Bold;
                currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Название показателя"))));
                currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Вес"))));
                currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Значение"))));

                foreach (Factor item in data[key])
                {
                    t.RowGroups[0].Rows.Add(new TableRow());
                    currentRow = t.RowGroups[0].Rows[t.RowGroups[0].Rows.Count-1];
                    currentRow.FontWeight = FontWeights.Normal;

                    // Add cells with content to the third row.
                    currentRow.Cells.Add(new TableCell(new Paragraph(new Run(item.name))));
                    currentRow.Cells.Add(new TableCell(new Paragraph(new Run(item.weight.ToString()))));
                    currentRow.Cells.Add(new TableCell(new Paragraph(new Run(item.value.ToString()))));
                }

                t.RowGroups[0].Rows.Add(new TableRow());
                currentRow = t.RowGroups[0].Rows[t.RowGroups[0].Rows.Count - 1];
                currentRow.FontWeight = FontWeights.Normal;

                // Add cells with content to the third row.
                currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Интегральная оценка"))));
                currentRow.Cells[0].ColumnSpan = 2;
                currentRow.Cells.Add(new TableCell(new Paragraph(new Run(_WA(key).ToString()))));


                FlowDoc.Blocks.Add(t);
            }

            // PEST
            double res_p = _WA("p_v") - _WA("p_u");
            double res_e = _WA("e_v") - _WA("e_u");
            double res_s = _WA("s_v") - _WA("s_u");
            double res_t = _WA("t_v") - _WA("t_u");
            p = new Paragraph(new Run("PEST-анализ"));
            p.FontSize = 16;
            FlowDoc.Blocks.Add(p);
            p = new Paragraph(new Run(
                "Интегральная оценка политических факторов: " + res_p.ToString() + ". \n" +
                "Интегральная оценка экономических факторов: " + res_e.ToString() + ". \n" +
                "Интегральная оценка технических факторов: " + res_t.ToString() + ". \n" +
                "Интегральная оценка социальных факторов: " + res_s.ToString() + ". \n"
            ));
            p.FontSize = 12;
            FlowDoc.Blocks.Add(p);

            // SWOT

            double res_o = (_WA("p_v") + _WA("e_v") + _WA("s_v") + _WA("t_v")) / 4;
            res_t = (_WA("p_u") + _WA("e_u") + _WA("s_u") + _WA("t_u")) / 4;

            FuzzyCalcNET.Set.FuzzySet controller = new TriangleClassifier(new string[] { "I", "II", "III" }, edge: true);
            double res_w = 0.0;
            res_s = 0.0;
            double sum_s = 0.0;
            double sum_w = 0.0;
            foreach (string key in data.Keys)
            {
                foreach (Factor item in data[key])
                {
                    res_w += controller.find(item.value, "I") * item.weight;
                    sum_w += item.weight;
                    res_s += controller.find(item.value, "III") * item.weight;
                    sum_s += item.weight;
                }
            }

            if (sum_s == 0.0)
            {
                res_s = 0.0;
            }
            else
            {
                res_s /= sum_s;
            }

            if (sum_w == 0.0)
            {
                res_w = 0.0;
            }
            else
            {
                res_w /= sum_w;
            }

            p = new Paragraph(new Run("SWOT-анализ"));
            p.FontSize = 16;
            FlowDoc.Blocks.Add(p);
            p = new Paragraph(new Run(
                "Интегральная оценка сильных сторон (S): " + res_s.ToString() + ". \n\r" +
                "Интегральная оценка слабых сторон (W): " + res_w.ToString() + ". \n\r" +
                "Интегральная оценка возможностей (O): " + res_o.ToString() + ". \n\r" +
                "Интегральная оценка угроз (T): " + res_t.ToString() + ". \n\r\n\r" +
                "(SO): " + (res_s * res_o).ToString() + ". \n\r" +
                "(ST): " + (res_s * res_t).ToString() + ". \n\r" +
                "(WO): " + (res_w * res_o).ToString() + ". \n\r" +
                "(WT): " + (res_w * res_t).ToString() + ". \n\r"
            ));
            p.FontSize = 12;
            FlowDoc.Blocks.Add(p);

            p = new Paragraph(new Run("Выводы"));
            p.FontSize = 16;
            FlowDoc.Blocks.Add(p);
            p = new Paragraph(new Run(""));
            p.FontSize = 16;
            FlowDoc.Blocks.Add(p);

            ResultsTab.IsSelected = true;

        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void About_program_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Fuzzy Management \n(с) 2012. ВолгГТУ. Шаховская Л.С., Аракелова И.В., Коротеев М.В.");
        }

        private void Image_btn_Click(object sender, RoutedEventArgs e)
        {
			OpenFileDialog openFileDialog1 = new OpenFileDialog();
			openFileDialog1.Filter = "JPEG Images|*.jpg";
			openFileDialog1.Title = "Выберите изображение организационной структуры";
			// Show the dialog and get result.
	    	Nullable<bool> result = openFileDialog1.ShowDialog();
            if (result == true) // Test result.
            {
                string filename = openFileDialog1.FileName;
                BitmapImage bmp = new BitmapImage();
                bmp.BeginInit(); // загружаю картинку
                bmp.UriSource = new Uri(filename);
                bmp.EndInit();
                Clipboard.SetImage(bmp);
                RTB.CaretPosition = RTB.CaretPosition.DocumentEnd;
                RTB.Paste();
            }
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
			// Configure save file dialog box
			Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
			dlg.FileName = "Document"; // Default file name
			dlg.DefaultExt = ".rtf"; // Default file extension
			dlg.Filter = "Text documents (.rtf)|*.rtf"; // Filter files by extension
			// Show save file dialog box
			Nullable<bool> result = dlg.ShowDialog();
			string filename;
			// Process save file dialog box results
			if (result == true)
			{
				// Save document
				filename = dlg.FileName;
				TextRange range;
	           	FileStream fStream;
            	range = new TextRange(RTB.Document.ContentStart, RTB.Document.ContentEnd);
            	fStream = new FileStream(filename, FileMode.Create);
            	range.Save(fStream, DataFormats.Rtf);
            	fStream.Close();
			}			
        }
        private void Add_Factor(string key)
        {
            data[key].Add(new Factor());
        }

        private void add_e_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("e_v");
        }

        private void add_e_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("e_u");
        }

        private void add_p_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("p_v");
        }

        private void add_p_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("p_u");
        }

        private void add_t_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("t_v");
        }

        private void add_t_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("t_u");
        }

        private void add_s_v_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("s_v");
        }

        private void add_s_u_Click(object sender, RoutedEventArgs e)
        {
            Add_Factor("s_u");
        }


    }
    class Factor
    {
        public string name { get; set; }
        public double weight { get; set; }
        public double value { get; set; }
        public Factor(string n="", double w=0.0, double v=0.0)
        {
            this.name = n;
            this.weight = w;
            this.value = v;
        }
    }
}
